# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL для хранения данных приложений
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: secret_management
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - secret_network
    restart: unless-stopped

  # Keycloak для аутентификации
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    ports:
      - "8080:8080"
    networks:
      - secret_network
    depends_on:
      - postgres
    restart: unless-stopped

  # OpenBao для хранения секретов
  openbao:
    image: baoproject/openbao:1.13.0
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${OPENBAO_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - openbao_data:/vault/data
    networks:
      - secret_network
    restart: unless-stopped

  # Backend FastAPI приложение
  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://admin:${POSTGRES_PASSWORD}@postgres:5432/secret_management
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=secret-management
      - KEYCLOAK_CLIENT_ID=backend-service
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - OPENBAO_URL=http://openbao:8200
      - OPENBAO_TOKEN=${OPENBAO_ROOT_TOKEN}
    ports:
      - "8000:8000"
    networks:
      - secret_network
    depends_on:
      - postgres
      - keycloak
      - openbao
    restart: unless-stopped
    volumes:
      - ./backend:/app

  # Nginx как API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - secret_network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  openbao_data:

networks:
  secret_network:
    driver: bridge