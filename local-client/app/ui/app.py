import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import webbrowser
from core.database import Database, SecretType
from core.services import AuthService, SecretService, AuditService
from .themes import ThemeManager
from .components.widgets import ModernButton, SecretCard

class SecureVaultApp:
    def __init__(self):
        self.root = tk.Tk()
        self.theme = ThemeManager.get_theme()
        
        # Initialize services
        self.database = Database()
        self.auth_service = AuthService(self.database)
        self.secret_service = SecretService(self.database, self.auth_service)
        self.audit_service = AuditService(self.database)
        
        self._setup_window()
        self.show_login()
    
    def _setup_window(self):
        self.root.title("üîê Secure Vault - Enterprise Secret Management")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg=self.theme.colors.background)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.root.bind("<Escape>", self._exit_fullscreen)
        self.root.bind("<F11>", self._toggle_fullscreen)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤ —É–≥–ª—É
        self._add_close_button()
    
    def _add_close_button(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É"""
        close_btn = tk.Button(
            self.root,
            text="‚ùå",
            command=self.root.quit,
            font=("Arial", 14),
            bg=self.theme.colors.error,
            fg="white",
            border=0,
            cursor="hand2"
        )
        close_btn.place(relx=0.98, rely=0.02, anchor="ne")
    
    def _exit_fullscreen(self, event=None):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ Escape"""
        self.root.attributes('-fullscreen', False)
        self.root.geometry("1000x700")
        self._center_window()
    
    def _toggle_fullscreen(self, event=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ F11"""
        self.root.attributes('-fullscreen', not self.root.attributes('-fullscreen'))
    
    def _center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.root.update_idletasks()
        width = 1000
        height = 700
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def clear_window(self):
        for widget in self.root.winfo_children():
            if not isinstance(widget, tk.Button) or widget.cget("text") != "‚ùå":
                widget.destroy()
    
    def show_login(self):
        self.clear_window()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        main_frame = tk.Frame(self.root, bg=self.theme.colors.background)
        main_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.8, relheight=0.8)
        
        # Title
        title_label = tk.Label(
            main_frame,
            text="üîê SECURE VAULT",
            font=("Arial", 36, "bold"),
            fg=self.theme.colors.primary,
            bg=self.theme.colors.background
        )
        title_label.pack(pady=(0, 20))
        
        subtitle_label = tk.Label(
            main_frame,
            text="Enterprise Secret Management Platform",
            font=("Arial", 18),
            fg=self.theme.colors.text_secondary,
            bg=self.theme.colors.background
        )
        subtitle_label.pack(pady=(0, 60))
        
        # Login form
        form_frame = tk.Frame(main_frame, bg=self.theme.colors.surface, relief='raised', bd=2)
        form_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.6, relheight=0.7)
        
        # Test credentials
        info_label = tk.Label(
            form_frame,
            text="üöÄ –î–ï–ú–û-–†–ï–ñ–ò–ú - –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            font=("Arial", 14, "bold"),
            fg=self.theme.colors.primary,
            bg=self.theme.colors.surface
        )
        info_label.pack(pady=(40, 20))
        
        test_users = [
            "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123",
            "üë§ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: demo / demo123", 
            "üë• –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user / user123",
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π: test / test123"
        ]
        
        for user in test_users:
            tk.Label(
                form_frame,
                text=user,
                font=("Arial", 12),
                fg=self.theme.colors.text_secondary,
                bg=self.theme.colors.surface
            ).pack(pady=3)
        
        # Input fields
        input_frame = tk.Frame(form_frame, bg=self.theme.colors.surface)
        input_frame.pack(fill='x', pady=(40, 0), padx=60)
        
        # Username
        tk.Label(
            input_frame,
            text="–õ–æ–≥–∏–Ω:",
            font=("Arial", 14, "bold"),
            fg=self.theme.colors.text_primary,
            bg=self.theme.colors.surface
        ).pack(anchor='w', pady=(20, 5))
        
        self.username_entry = tk.Entry(
            input_frame,
            font=("Arial", 16),
            bg="#0A0A0A",
            fg=self.theme.colors.text_primary,
            insertbackground=self.theme.colors.text_primary
        )
        self.username_entry.pack(fill='x', pady=(0, 20))
        self.username_entry.insert(0, "demo")
        
        # Password
        tk.Label(
            input_frame,
            text="–ü–∞—Ä–æ–ª—å:",
            font=("Arial", 14, "bold"),
            fg=self.theme.colors.text_primary,
            bg=self.theme.colors.surface
        ).pack(anchor='w', pady=(20, 5))
        
        self.password_entry = tk.Entry(
            input_frame,
            font=("Arial", 16),
            show="‚Ä¢",
            bg="#0A0A0A",
            fg=self.theme.colors.text_primary,
            insertbackground=self.theme.colors.text_primary
        )
        self.password_entry.pack(fill='x', pady=(0, 40))
        self.password_entry.insert(0, "demo123")
        self.password_entry.bind('<Return>', lambda e: self.login())
        
        # Login button
        ModernButton(
            input_frame,
            "üîì –í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£",
            self.login,
            width=400,
            height=60
        ).pack()
        
        # Status
        self.status_label = tk.Label(
            input_frame,
            text="",
            font=("Arial", 12),
            fg=self.theme.colors.error,
            bg=self.theme.colors.surface
        )
        self.status_label.pack(pady=20)
        
        # Footer hint
        hint_label = tk.Label(
            form_frame,
            text="üí° –ù–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ | F11 –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è",
            font=("Arial", 10),
            fg=self.theme.colors.text_secondary,
            bg=self.theme.colors.surface
        )
        hint_label.pack(side='bottom', pady=20)
    
    def login(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get()
        
        if not username or not password:
            self.status_label.config(text="‚ùå –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        self.status_label.config(text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        self.root.update()
        
        # Simulate network delay
        self.root.after(1000, lambda: self._perform_login(username, password))
    
    def _perform_login(self, username, password):
        if self.auth_service.login(username, password):
            self.status_label.config(text="‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ó–∞–≥—Ä—É–∑–∫–∞...", fg=self.theme.colors.success)
            self.root.after(1500, self.show_dashboard)
        else:
            self.status_label.config(text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", fg=self.theme.colors.error)
    
    def show_dashboard(self):
        self.clear_window()
        
        # Header
        header = tk.Frame(self.root, bg="#050505", height=100)
        header.pack(fill='x', side='top')
        header.pack_propagate(False)
        
        # User info
        user_info_frame = tk.Frame(header, bg="#050505")
        user_info_frame.pack(side='left', padx=40, pady=30)
        
        user = self.auth_service.get_current_user()
        tk.Label(
            user_info_frame,
            text=f"üëã {user.display_name}",
            font=("Arial", 20, "bold"),
            fg=self.theme.colors.text_primary,
            bg="#050505"
        ).pack(anchor='w')
        
        tk.Label(
            user_info_frame,
            text="–ö–æ—à–µ–ª–µ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)",
            font=("Arial", 14),
            fg=self.theme.colors.text_secondary,
            bg="#050505"
        ).pack(anchor='w')
        
        # Controls
        controls_frame = tk.Frame(header, bg="#050505")
        controls_frame.pack(side='right', padx=40, pady=30)
        
        # –£–ë–†–ê–ù–ê –∫–Ω–æ–ø–∫–∞ "‚ûï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª
        
        ModernButton(
            controls_frame,
            "üìä –ê—É–¥–∏—Ç",
            self.show_audit_dialog,
            width=120,
            height=45,
            bg_color="#3498db",
            hover_color="#2980b9"
        ).pack(side='left', padx=8)
        
        ModernButton(
            controls_frame,
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            lambda: self.show_dashboard(),
            width=120,
            height=45,
            bg_color="#333333",
            hover_color="#555555"
        ).pack(side='left', padx=8)
        
        ModernButton(
            controls_frame,
            "üö™ –í—ã—Ö–æ–¥",
            self.logout,
            width=120,
            height=45,
            bg_color=self.theme.colors.error,
            hover_color="#FF5252"
        ).pack(side='left', padx=8)
        
        # Content
        content = tk.Frame(self.root, bg=self.theme.colors.background)
        content.pack(fill='both', expand=True, padx=40, pady=20)
        
        # Stats
        self.show_stats(content)
        
        # Search
        self.show_search(content)
        
        # Secrets
        self.show_secrets(content)
    
    def show_stats(self, parent):
        stats_frame = tk.Frame(parent, bg=self.theme.colors.surface, relief='raised', bd=1)
        stats_frame.pack(fill='x', pady=(0, 30))
        
        user = self.auth_service.get_current_user()
        stats = self.audit_service.get_user_stats(user.username)
        
        stats_data = [
            (f"üìä –í—Å–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–æ–≤: {stats['total']}", self.theme.colors.text_primary),
            (f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}", self.theme.colors.success),
            (f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {stats['pending']}", self.theme.colors.warning),
            (f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}", self.theme.colors.error)
        ]
        
        for text, color in stats_data:
            frame = tk.Frame(stats_frame, bg=self.theme.colors.surface)
            frame.pack(side='left', expand=True, padx=30, pady=20)
            
            tk.Label(
                frame,
                text=text,
                font=("Arial", 14, "bold"),
                fg=color,
                bg=self.theme.colors.surface
            ).pack()
    
    def show_search(self, parent):
        """–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        search_frame = tk.Frame(parent, bg=self.theme.colors.background)
        search_frame.pack(fill='x', pady=(0, 20))
        
        # Search label
        tk.Label(
            search_frame,
            text="üîç –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤:",
            font=("Arial", 16, "bold"),
            fg=self.theme.colors.text_primary,
            bg=self.theme.colors.background
        ).pack(side='left', padx=(0, 15))
        
        # Search entry
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(
            search_frame,
            textvariable=self.search_var,
            font=("Arial", 14),
            bg=self.theme.colors.surface,
            fg=self.theme.colors.text_primary,
            insertbackground=self.theme.colors.text_primary,
            width=40
        )
        search_entry.pack(side='left', padx=(0, 15))
        
        # Search button
        ModernButton(
            search_frame,
            "–ù–∞–π—Ç–∏",
            self.perform_search,
            width=100,
            height=40
        ).pack(side='left', padx=(0, 15))
        
        # Request access button (–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏)
        ModernButton(
            search_frame,
            "üåê –ù–µ –Ω–∞—à–ª–∏? –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø",
            self.show_request_dialog,
            width=280,
            height=40,
            bg_color="#3498db",
            hover_color="#2980b9"
        ).pack(side='left')
        
        # Bind Enter key to search
        search_entry.bind('<Return>', lambda e: self.perform_search())
    
    def perform_search(self, event=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        query = self.search_var.get().strip()
        
        if not query:
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã
            self.show_secrets_after_search(self.secret_service.get_user_secrets())
            return
        
        # –ò—â–µ–º —Å–µ–∫—Ä–µ—Ç—ã
        user = self.auth_service.get_current_user()
        found_secrets = self.database.search_secrets(query, user.username)
        
        if not found_secrets:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.show_search_no_results(query)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
            self.show_secrets_after_search(found_secrets)
    
    def show_search_no_results(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã
        for widget in self.root.winfo_children():
            if hasattr(widget, '_name') and widget._name == 'secrets_container':
                widget.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        container = tk.Frame(self.root, bg=self.theme.colors.background, name='secrets_container')
        container.pack(fill='both', expand=True, padx=40, pady=20)
        
        message_frame = tk.Frame(
            container,
            bg=self.theme.colors.surface,
            relief='raised',
            bd=1
        )
        message_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.6, relheight=0.4)
        
        tk.Label(
            message_frame,
            text=f"üîç –°–µ–∫—Ä–µ—Ç '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
            font=("Arial", 20, "bold"),
            fg=self.theme.colors.text_secondary,
            bg=self.theme.colors.surface
        ).pack(expand=True, pady=(80, 20))
        
        tk.Label(
            message_frame,
            text="–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Å–µ–∫—Ä–µ—Ç—É —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª",
            font=("Arial", 16),
            fg=self.theme.colors.text_secondary,
            bg=self.theme.colors.surface
        ).pack(pady=(0, 40))
        
        ModernButton(
            message_frame,
            f"üåê –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ '{query}'",
            self.show_request_dialog,
            width=350,
            height=60
        ).pack(pady=20)
    
    def show_secrets_after_search(self, secrets):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã
        for widget in self.root.winfo_children():
            if hasattr(widget, '_name') and widget._name == 'secrets_container':
                widget.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = tk.Frame(self.root, bg=self.theme.colors.background, name='secrets_container')
        container.pack(fill='both', expand=True, padx=40, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(container, bg=self.theme.colors.background)
        title_frame.pack(fill='x', pady=(0, 20))
        
        tk.Label(
            title_frame,
            text="üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê" if self.search_var.get() else "üìÅ –ú–û–ò –°–ï–ö–†–ï–¢–´",
            font=("Arial", 24, "bold"),
            fg=self.theme.colors.primary,
            bg=self.theme.colors.background
        ).pack(anchor='w')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
        if not secrets:
            self.show_empty_state(container)
        else:
            # –ö–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
            secrets_container = tk.Frame(container, bg=self.theme.colors.background)
            secrets_container.pack(fill='both', expand=True)
            
            canvas = tk.Canvas(secrets_container, bg=self.theme.colors.background, highlightthickness=0)
            scrollbar = ttk.Scrollbar(secrets_container, orient="vertical", command=canvas.yview)
            scrollable_frame = tk.Frame(canvas, bg=self.theme.colors.background)
            
            scrollable_frame.bind(
                "<Configure>",
                lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
            )
            
            canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
            canvas.configure(yscrollcommand=scrollbar.set)
            
            for secret in secrets:
                from .components.widgets import SecretCard
                SecretCard(
                    scrollable_frame,
                    secret,
                    on_copy=self.copy_secret,
                    on_view=self.view_secret
                ).pack(fill='x', pady=10, padx=5)
            
            canvas.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")
    
    def show_secrets(self, parent):
        # Title
        title_frame = tk.Frame(parent, bg=self.theme.colors.background)
        title_frame.pack(fill='x', pady=(0, 20))
        
        tk.Label(
            title_frame,
            text="üìÅ –ú–û–ò –°–ï–ö–†–ï–¢–´",
            font=("Arial", 24, "bold"),
            fg=self.theme.colors.primary,
            bg=self.theme.colors.background
        ).pack(anchor='w')
        
        # Secrets container with scroll
        container = tk.Frame(parent, bg=self.theme.colors.background, name='secrets_container')
        container.pack(fill='both', expand=True)
        
        canvas = tk.Canvas(container, bg=self.theme.colors.background, highlightthickness=0)
        scrollbar = ttk.Scrollbar(container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.theme.colors.background)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Load secrets
        secrets = self.secret_service.get_user_secrets()
        
        if not secrets:
            self.show_empty_state(scrollable_frame)
        else:
            for secret in secrets:
                SecretCard(
                    scrollable_frame,
                    secret,
                    on_copy=self.copy_secret,
                    on_view=self.view_secret
                ).pack(fill='x', pady=10, padx=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def show_empty_state(self, parent):
        empty_frame = tk.Frame(
            parent,
            bg=self.theme.colors.surface,
            relief='raised',
            bd=1
        )
        empty_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.6, relheight=0.4)
        
        tk.Label(
            empty_frame,
            text="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤",
            font=("Arial", 24, "bold"),
            fg=self.theme.colors.text_secondary,
            bg=self.theme.colors.surface
        ).pack(expand=True, pady=(80, 20))
        
        tk.Label(
            empty_frame,
            text="–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª",
            font=("Arial", 16),
            fg=self.theme.colors.text_secondary,
            bg=self.theme.colors.surface
        ).pack(pady=(0, 40))
        
        ModernButton(
            empty_frame,
            "üåê –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª",
            self.show_request_dialog,
            width=350,
            height=60
        ).pack(pady=20)
    
    def copy_secret(self, secret):
        value = self.secret_service.get_secret_value(secret.id)
        if value:
            messagebox.showinfo(
                "‚úÖ –°–µ–∫—Ä–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", 
                f"–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ '{secret.name}' –≥–æ—Ç–æ–≤–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n"
                f"üîê {value}\n\n"
                "–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."
            )
        else:
            messagebox.showwarning(
                "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 
                "–≠—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."
            )
    
    def view_secret(self, secret):
        value = self.secret_service.get_secret_value(secret.id)
        if value:
            dialog = tk.Toplevel(self.root)
            dialog.title(f"üîê {secret.name}")
            # –î–µ–ª–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–∂–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º
            dialog.attributes('-fullscreen', True)
            dialog.configure(bg=self.theme.colors.background)
            dialog.transient(self.root)
            dialog.grab_set()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            close_dialog_btn = tk.Button(
                dialog,
                text="‚ùå",
                command=dialog.destroy,
                font=("Arial", 14),
                bg=self.theme.colors.error,
                fg="white",
                border=0,
                cursor="hand2"
            )
            close_dialog_btn.place(relx=0.98, rely=0.02, anchor="ne")
            
            # Header
            header_frame = tk.Frame(dialog, bg=self.theme.colors.background)
            header_frame.pack(fill='x', padx=40, pady=40)
            
            tk.Label(
                header_frame,
                text=f"üîê {secret.name}",
                font=("Arial", 24, "bold"),
                fg=self.theme.colors.primary,
                bg=self.theme.colors.background
            ).pack(anchor='w')
            
            tk.Label(
                header_frame,
                text=secret.description,
                font=("Arial", 16),
                fg=self.theme.colors.text_secondary,
                bg=self.theme.colors.background,
                wraplength=1200
            ).pack(anchor='w', pady=(10, 0))
            
            # Secret value
            value_frame = tk.Frame(dialog, bg=self.theme.colors.background)
            value_frame.pack(fill='both', expand=True, padx=40, pady=20)
            
            tk.Label(
                value_frame,
                text="–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞:",
                font=("Arial", 18, "bold"),
                fg=self.theme.colors.text_primary,
                bg=self.theme.colors.background
            ).pack(anchor='w', pady=(0, 20))
            
            text_frame = tk.Frame(value_frame, bg=self.theme.colors.background)
            text_frame.pack(fill='both', expand=True)
            
            text_widget = scrolledtext.ScrolledText(
                text_frame,
                wrap=tk.WORD,
                font=("Consolas", 14),
                bg=self.theme.colors.surface,
                fg=self.theme.colors.text_primary,
                insertbackground=self.theme.colors.text_primary,
                relief='flat'
            )
            text_widget.pack(fill='both', expand=True)
            text_widget.insert('1.0', value)
            text_widget.config(state='disabled')
            
            # Buttons
            button_frame = tk.Frame(dialog, bg=self.theme.colors.background)
            button_frame.pack(fill='x', padx=40, pady=40)
            
            ModernButton(
                button_frame,
                "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä",
                lambda: self.copy_secret_value(value, dialog),
                width=250,
                height=60
            ).pack(side='left', padx=(0, 20))
            
            ModernButton(
                button_frame,
                "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                dialog.destroy,
                width=150,
                height=60,
                bg_color="#333333",
                hover_color="#555555"
            ).pack(side='left')
        else:
            messagebox.showwarning(
                "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 
                "–≠—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."
            )
    
    def copy_secret_value(self, value, parent):
        messagebox.showinfo(
            "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", 
            "–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.",
            parent=parent
        )
    
    def show_request_dialog(self):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        web_portal_url = "http://192.168.0.77:3000"  # IP —Ç–≤–æ–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
        
        try:
            webbrowser.open(web_portal_url)
            messagebox.showinfo(
                "üåê –í–µ–±-–ø–æ—Ä—Ç–∞–ª", 
                f"–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–µ–±-–ø–æ—Ä—Ç–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:\n{web_portal_url}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –Ω—É–∂–Ω–æ–º—É —Å–µ–∫—Ä–µ—Ç—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
            )
        except Exception as e:
            messagebox.showinfo(
                "üåê –í–µ–±-–ø–æ—Ä—Ç–∞–ª", 
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:\n{web_portal_url}\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –Ω—É–∂–Ω–æ–º—É —Å–µ–∫—Ä–µ—Ç—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
            )
    
    def show_audit_dialog(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("üìä –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞")
        # –î–µ–ª–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º
        dialog.attributes('-fullscreen', True)
        dialog.configure(bg=self.theme.colors.background)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        close_dialog_btn = tk.Button(
            dialog,
            text="‚ùå",
            command=dialog.destroy,
            font=("Arial", 14),
            bg=self.theme.colors.error,
            fg="white",
            border=0,
            cursor="hand2"
        )
        close_dialog_btn.place(relx=0.98, rely=0.02, anchor="ne")
        
        main_frame = tk.Frame(dialog, bg=self.theme.colors.background)
        main_frame.pack(fill='both', expand=True, padx=40, pady=40)
        
        # Title
        tk.Label(
            main_frame,
            text="üìä –ñ–£–†–ù–ê–õ –ê–£–î–ò–¢–ê",
            font=("Arial", 24, "bold"),
            fg=self.theme.colors.primary,
            bg=self.theme.colors.background
        ).pack(anchor='w', pady=(0, 30))
        
        # Logs table
        columns = ("–í—Ä–µ–º—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–î–µ–π—Å—Ç–≤–∏–µ", "–û–±—ä–µ–∫—Ç", "–°—Ç–∞—Ç—É—Å")
        tree = ttk.Treeview(main_frame, columns=columns, show="headings", height=20)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        style = ttk.Style()
        style.configure("Treeview", font=("Arial", 12), rowheight=30)
        style.configure("Treeview.Heading", font=("Arial", 14, "bold"))
        
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=200)
        
        tree.column("–í—Ä–µ–º—è", width=250)
        tree.column("–î–µ–π—Å—Ç–≤–∏–µ", width=180)
        tree.column("–°—Ç–∞—Ç—É—Å", width=150)
        
        # Add data
        logs = self.audit_service.get_logs()
        for log in logs:
            time = log.timestamp.strftime("%d.%m.%Y %H:%M:%S")
            tree.insert("", "end", values=(time, log.user, log.action, log.resource, log.status))
        
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Close button
        btn_frame = tk.Frame(main_frame, bg=self.theme.colors.background)
        btn_frame.pack(fill='x', pady=(30, 0))
        
        ModernButton(
            btn_frame,
            "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            dialog.destroy,
            width=180,
            height=60,
            bg_color="#333333",
            hover_color="#555555"
        ).pack(side='right')
    
    def logout(self):
        self.auth_service.logout()
        self.show_login()
    
    def run(self):
        try:
            self.root.mainloop()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            self.root.quit()